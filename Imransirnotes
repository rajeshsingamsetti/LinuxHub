linux kernal
interface between hardware & software
hardware;
cpu
memory
kernal:
programs
application

kernel + shell = os (talks to hardware)

what is shell:
shell is like container
interface b/w users & kernal
cli is a shell
find shell type
echo $0

shell scripting means:
do this do that called shell script

types of shell:

gnome 
kde
sh
bash
csh and tcsh
ksh

cat /etc/shells

starting shelll

just type the shell name

how to run shell script
absolute path
/var/www/html

releative path
./filename

chmod +x filename (after run a shell file)

scripting standards
end with .sh
script permission +x (by default script execute permission not allocate)
script format

#! /bin/bash
use comments //
define variables
commands (echo ,cp,grep)
statements (if , while,for)

                                Enhancing the shell scripting by follow concepts
variables
filters like grep,cut,awk,&sed commands
conditional statements
loops
functions
job scheduling & many more

                                    Syallabus for the couse
How to write shell scripts from basic to advanced level
what is the shebang line and why every shell script need ones
how to create and use variables
testing and decision making
command line arguments
input and output
conditional statements
exit status
filter like grep,awk,cut,sed,tr and find
functions
wildcards
loops
case statements
logging
debugging tips
bash shell options
working with remote servers
practice on each topic

===================================================*============*============*==========================*=========*=========*=======*=============
shebang line means which line we want to execute
* to find complete path
cat /etc/shells
!#/bin/bash

chmod +x filename

./filename

Redirection operators & stdin,stdout,stderr
store output of operation
=====output redirection=====
> 
>> (it will append the data to existing file)
=====input redirection==================
< to provide the input
===combining redirection operators==========
to send standard output of one command to another command as standard input
| (pipeline symbol)
1>file1(success) 2>file2(fail)

=============commands to read a file=====
vi
cat -n filename
less (scroll up and scroll down to see the data)
more
=======read a file with condition=====
more -n filename
more +4 filename

head filename(top 10 lines will display)
head -2 filename
tail filename(last 10 lines it will display)
=======print range of lines from given file====
head -12 filename | tail -7 filename
same above command shortcut
awk 'NR>=6 && NR<=12 {print}' filename
sed -n '6,12p' filename

============grep command======================
grep is a filter command used to search a string in a file or folder

grep "stringname" filename
grep "stringname" *(star means all files in current location)
grep -i "String" filename (i will represents the case sensitive ignore)
grep -w "String" filename (to match a exact whole word)
-v is used for not contain that word
-o only matched words and lines
-n it will give the line number
-c it will display the matched no of lines count
*** -r to search under current directory and sub directory
grep -r "stringname" .(dot indicates current location)
-l to display the filenames

advanced grep
-f search string & pattern from file ,one per line
-E at a time to search multi strings
grep -E "line|string|hh" filename

================cut===========================
cut -c 1 /etc/passwd (it will cutand display the first character)
cut -c 4,9 /etc/passwd
cut -c 4-9,12 /etc/passwd

to get strings or fields
cut -f 2 filename(it will print the 2nd field)
cut -f 1,3 filename
cut -f -2 filename (it will print the below two fields from file)























